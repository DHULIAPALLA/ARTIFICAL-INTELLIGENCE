graph = {
    1: [2, 3],
    2: [4,5],
    3: [6,7],
    4: [8,9],
    5: [10,11],
    6: [],
    7:[],
    8:[],
    9:[],
    10:[],
    11:[]
}

path = list()

def DFS(currentNode,destination,graph,maxDepth,curList):
    print("Checking for destination",currentNode)
    curList.append(currentNode)
    if currentNode==destination:
        return True
    if maxDepth<=0:
        path.append(curList)
        return False
    for node in graph[currentNode]:
        if DFS(node,destination,graph,maxDepth-1,curList):
            return True
        else:
            curList.pop()
    return False

def iterativeDDFS(currentNode,destination,graph,maxDepth):
    for i in range(maxDepth):
        curList = list()
        if DFS(currentNode,destination,graph,i,curList):
            return True
    return False

if not iterativeDDFS(1,11,graph,11):
    print("Path is not available")
else:
    print("1 path exists")
    print(path.pop())
